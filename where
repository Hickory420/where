#!/bin/bash
# shellcheck disable=1117
#,2009,2126
set -u
shopt -s -o errexit #nounset
#shopt -s -o errexit nounset

## ToDo:
# Add -a --all to run all functions ?
# Add Function SHOW_USED_SPACE showing what is taking up the most space.
# Have SHOW_USED_SPACE called automatically when used space is above 90% or 95%
# Detect large listener logs $ORACLE_HOME/diag/tnslsnr/SITECODE/listener/trace/listener.log
# Fix up declarations!!!


##Vars
#declare -r TODAY=`date +%Y-%m-%d`
#declare -r TIME="date +%H-%M"

declare -r HEADING="Partition\tFull\tFree\tSize\tType
---------\t----\t----\t----\t----"

#Colors
declare -r NORMAL="\033[00m"
#declare -r OK="\033[1;32m"
declare -r WARNING="\033[1;33m"
declare -r CRITICAL="\033[1;31m"
declare -r REDBLACK="\033[41;30m"
#BLINK="\E[5m"
#BLINK="\E[25m"
#BLINK="\033[5m"
#BLINK="\e[5m"

##Functions

function INTERACTIVE(){
  case $- in
    *i*)        return 0 ;;
    *)  return 1 ;;
  esac
}

function FINDUSAGE(){
  local DIR=$1
  local RESULT; local DU
  local STOP="GO"
  [ "$DIR" = "/" ] && DIR=""

  until [ "$STOP" = "STOP" ]; do
    if [ -d "$DIR/" ]; then
      #DU=$(du --block-size=1M --summarize --one-file-system --exclude=/proc ${DIR}/* || killall "$THISSCRIPT")
      DU=$(du --block-size=1M --summarize --one-file-system --exclude=/proc ${DIR}/* || killall "du")
      RESULT=$(echo "$DU" | sort -nr | head -n1)
      DIR=$(echo "$RESULT" | awk '{print $2}')
      [ -d "$DIR/" ] && echo "$RESULT"
    else
      STOP="STOP"
    fi
  done
}

function MEMORY(){
  echo "Memory Usage"
}

function CORES(){

  local -i SOCKETS=$(grep -w "physical id" /proc/cpuinfo | sort -u | wc -l)
  [ "${SOCKETS}" -eq 0 ] && SOCKETS="1"
  local -i CORES=$(grep -w "core id" /proc/cpuinfo | sort -u | wc -l)
  [ "${CORES}" -eq 0 ] && CORES="1"
  local -r MODEL=$(grep -w "model name" /proc/cpuinfo | sort -u | awk -F: '{print $2}')
  local -ir THREADS=$(grep -w "processor" /proc/cpuinfo | sort -u | wc -l)
  local -ir TOTAL_CORES=$(echo $((${SOCKETS}*${CORES})))
  local -ir THREADS_PER_CORE=$(echo $((${THREADS}/${TOTAL_CORES})))

  echo -e "ModelName\t: " $MODEL
  echo -e "Sockets\t\t: " $SOCKETS
  echo -e "Cores/Socket\t: " $CORES
  echo -e "Threads/Core\t: " $THREADS_PER_CORE
  echo -e "TotalCores\t: " $TOTAL_CORES
  echo -e "TotalThreads\t: " $THREADS

  
  ## This works, but not worying about pretty print for now.
  #
  #labels="ModelName:
  #Sockets: 
  #Cores/Socket: 
  #Threads/Core: 
  #TotalCores: 
  #TotalThreads:"
  #results="$MODEL
  #$SOCKETS
  #$CORES
  #$THREADS_PER_CORE
  #$TOTAL_CORES
  #$THREADS" 
  #paste <(echo "$labels") <(echo "$results")

}

function ONLINE(){
  ping -c1 -w2 8.8.8.8 >/dev/null 2>&1
  return $?
}

function ERRCHK(){
  local -ir STATUS=$1
  local -r MSG=$2
  if [ $STATUS -ne 0 ]; then
    echo $MSG
    exit $STATUS
  fi
}

function GET_IP(){
  local GET_IP_ARG="$1"

  local DEV NICS IP list EXTIP
  local IFCONFIG="/sbin/ifconfig"
  local IPA="/sbin/ip"
  if [ -x "$IFCONFIG" ]; then
    NICS=$("$IFCONFIG" -a | grep "^[a-z]" | cut -d" " -f 1)
    for DEV in $NICS; do
      DEV=$([ "${DEV:(-1)}" = ":" ] && echo "$DEV" | sed 's/:$//' || echo "$DEV") #If the last character is a : delete it.
      #local IP=$(/sbin/ifconfig "$DEV" | grep addr: | grep -v "inet6" | awk '{print $2}' | cut -d: -f2)
      IP=$(/sbin/ifconfig "$DEV" | grep inet | grep -v inet6 | awk '{print $2}' )
      echo -en "$DEV:\t"
      if [ "$IP" ]; then
        if echo "$IP" | grep -q addr; then
          echo "$IP" | cut -d: -f2
        else
          echo "$IP"
        fi
      else
          echo "Up, but no IP address"
      fi
    done
  elif [ -x "$IPA" ]; then
    list=$(ip a | grep -w -e inet -e "^[0-9].*:" | awk '{print $2}')
    for line in $list; do
        if echo "$line" | grep -q ":"; then
            echo -en "${line}\t"
        else
            echo "$line"
        fi
    done
  else
    echo "Unable to execute $IFCONFIG or $IPA"
    echo -e "LAN:\tUnavailable"
  fi

  echo -en "WAN:\t"
  if ONLINE; then
    if [ "$GET_IP_ARG" = "all" ]; then
      #local EXTIP=$(curl http://icanhazip.com 2>/dev/null)
      EXTIP=$(wget -q -O - http://icanhazip.com 2>/dev/null)
      [ "$EXTIP" ] && echo "${EXTIP}" || echo "Failed. Err $?"
    else
      echo "Online"
    fi
  else
    echo "OFFLINE"
  fi
  #else
  #  local -r IPFILE="/etc/sysconfig/network-scripts/ifcfg-eth0"
  #  if [ -r "$IPFILE" ]; then
  #    local -r IP62=`grep IPADDR $IPFILE 2>/dev/null | awk -F= '{print $2}'`
  #    local -r IP55=`grep IPADDR $IPFILE 2>/dev/null | awk -F\" '{print $2}'`
  #    [ -n "$IP62" ] && IP=$IP62
  #    [ -n "$IP55" ] && IP=$IP55
  #    [ -n "$IP" ] && echo "$IP" #|| GET_IP all
  #  else
  #    GET_IP all
  #  fi
  #fi
}

function DISK_DISPLAY(){
  local LINE PARTITION PERCENTS FULL
  echo -e "$HEADING"
  echo -e "$DISK_SIZES" | \
  while read -r LINE ; do
    PARTITION=$(echo "$LINE" | awk '{print $1}')
    PERCENTS=$(echo "$LINE" | awk '{print $2"\t"$3"\t"$5"\t"$4}')
    FULL=$(echo "$PERCENTS::3" | cut -d% -f1)
    if [ "$(expr length $FULL)" -ge 2 ]; then
      if [ "${PERCENTS::2}" -ge 80 ] && [ "${PERCENTS::2}" -lt 90 ]; then #Add Yellow color if the percentage full is between 80-89
        local PERCENTS="${WARNING}${PERCENTS::3}${NORMAL}${PERCENTS:3}"
      elif [ "${PERCENTS::2}" -ge 90 ] && [ "${FULL}" -lt 100 ]; then   #Add Bright Red Color if the percentage full is between 90-99
        local PERCENTS="${CRITICAL}${PERCENTS::3}${NORMAL}${PERCENTS:3}"  #${REDBLACK}<<<--- Not Good!!!${NORMAL}";
      elif [ "${PERCENTS::3}" = 100 ]; then                       #Add Bright Red Color if the percentage full is 100 and make it stand out.
        local PERCENTS="${CRITICAL}${PERCENTS::4}${NORMAL}${PERCENTS:4}\t${REDBLACK}<<<--- VERY BAD${NORMAL}";
      fi
    fi

    if [ "$PARTITION" ]; then
      local FORMAT PARTITION
      FORMAT=$(expr length $PARTITION)
      if [ "$FORMAT" -ge 8 ]; then #If the Partition column is greater than or equal to 8 characters, then add 1 tabbed space.
        PARTITION="$(expr substr $PARTITION 1 15)" #limit the PARTITION string from 1 to 15 characters to make output look neater
        echo -e "${PARTITION}\t${PERCENTS}"
      else
        echo -e "${PARTITION}\t\t${PERCENTS}"
      fi
    fi
  done
}

function DISK_CHECK(){
  local DISK_CHECK_ARG="$1"
  local DISK_SIZES
  local -r DISK=$(df -hPTl | grep -v Avail | awk '{print $7" "$6" "$5" "$2" "$3}')
  if [ "$DISK_CHECK_ARG" = all ]; then
    #Prints disk usage in an easy to read format.
    DISK_SIZES="$DISK"
    DISK_DISPLAY
  elif [ "$DISK_CHECK_ARG" = warn ]; then
    #Checks if disk space is between 80%-100% full, if so, show it...
    DISK_SIZES=$(echo "$DISK" | grep -E "[8-9][0-9]%|100%")
    if [ "$DISK_SIZES" ]; then
      DISK_DISPLAY
    else
      return 1
    fi
  fi
}

function NODE(){
  hostname | cut -d. -f1
}

function REMOTE(){
  local AUTH_LOG="/var/log/auth.log"
  local SECURE_LOG="/var/log/secure"
  local SSH_LOG
  if [ -f "$AUTH_LOG" ]; then
    SSH_LOG="$AUTH_LOG"
  elif [ -f "$SECURE_LOG" ]; then
    SSH_LOG="$SECURE_LOG"
  else
    echo "Can not find $AUTH_LOG or $SECURE_LOG"
    return 2
  fi
  echo "Using $SSH_LOG*"
  local HEADER=" Tries \tIP Address\tUser\n------- ---------------\t----"
  if [ "$(whoami)" = "root" ]; then
  #if [ -r "${SSH_LOG}" ]; then
      local FAIL FAIL_SHOW
      local GOOD GOOD_SHOW
      FAIL=$(awk 'gsub(".*sshd.*Failed password for (invalid user )?", "") {print $3 "\t" $1}' ${SSH_LOG}* | sort -k1,1 -k2n | uniq -c | sort -n | grep -v '(invalid')
      GOOD=$(awk 'gsub(".*sshd.*Accept", "") {print $6"\t"$4}' ${SSH_LOG}* | sort -k1,1 -k2n | uniq -c | sort -n)
      FAIL_SHOW=$(if [ -n "$FAIL" ]; then echo "${FAIL}" | wc -l; echo -e "$HEADER"; echo "$FAIL"; else echo 0; fi)
      GOOD_SHOW=$(if [ -n "$GOOD" ]; then echo "${GOOD}" | wc -l; echo -e "$HEADER"; echo "$GOOD"; else echo 0; fi)
      echo "Failures: $FAIL_SHOW"
      echo "Accepted: $GOOD_SHOW"
    #else
    #  echo "${SSH_LOG} does not exist or is unreadable"
    #fi
  else
    echo "You must be root (or use sudo) to use this function."
  fi
}

function DSTAT(){

  local -r HOME_BIN="$HOME/bin"
  local -r DSTAT_BIN="$HOME_BIN/dstat"
  #local -r DSTAT_VERSION="0.7.2"
  #local -r DSTAT_LINK="https://dag.wieers.com/home-made/dstat/dstat-$DSTAT_VERSION.tar.bz2"
  #local -r DSTAT_LINK="https://github.com/dagwieers/dstat/archive/master.zip"
  local -r DSTAT_LINK="https://github.com/dagwieers/dstat/archive/0.7.3.tar.gz"
  if [ ! -d "$DSTAT_BIN" ] ; then
    echo "dstat for this script is not installed... Installing"
    if ONLINE; then
      which wget >/dev/null 2>&1
      ERRCHK $? "wget is not installed (used to download dstat)"
      [ ! -d "$HOME_BIN" ] && mkdir -p "$HOME_BIN"
      cd $HOME_BIN
      curl -s -k -L $DSTAT_LINK | tar xz
      #wget -q -O - $DSTAT_LINK 2>/dev/null | tar xz
      ERRCHK $? "Failed to download dstat: $DSTAT_LINK"
      #mv dstat-$DSTAT_VERSION dstat
      cd - >/dev/null
      echo "Done."
      echo
    else
      echo "OFFLINE: Can not install dstat."
    fi
  fi

  if [ -d "$DSTAT_BIN" ] ; then
    echo "You may need to expand your terminal window for this one..."
    echo "Press CTRL+c to exit"
    $DSTAT_BIN/dstat --top-bio-adv --top-childwait \
                     --top-cpu-adv --top-cputime \
                     --top-cputime-avg --top-int \
                     --top-io-adv --top-latency \
                     --top-latency-avg --top-mem \
                     --top-oom 2>/dev/null
    [ $? -ne 0 ] && \
    $DSTAT_BIN/dstat --top-bio-adv --top-childwait \
                     --top-cpu-adv --top-cputime \
                     --top-cputime-avg --top-io-adv \
                     --top-latency --top-latency-avg \
                     --top-mem --top-oom
    [ $? -ne 0 ] && \
    $DSTAT_BIN/dstat
  fi
  return $?

}

function SYSTEMLOAD(){
  local SYSTEMLOAD_ARG="${1:-}"
  local LOAD
  local -r PROCFILE="/proc/loadavg"
  local ONE
  local FIVE
  local FIFTEEN
  local SHOW
  [ $PROCFILE ] && LOAD=$(cut -d\  -f1-3 < "$PROCFILE" ) || echo "$PROCFILE does not exist. Cannot show system load averages."
  if [ "$LOAD" ]; then
    #Want to use AWK to assign these variables in one command.
    ONE=$(echo "$LOAD" | cut -d" " -f1)
    FIVE=$(echo "$LOAD" | cut -d" " -f2)
    FIFTEEN=$(echo "$LOAD" | cut -d" " -f3)
  else
    echo "$PROCFILE contains nothing." && exit 1
  fi

  local ANS
  local -i ONE_CHECK FIVE_CHECK FIFTEEN_CHECK
  local CPU_PERCENTAGE
  ONE_CHECK=$(echo "${ONE}"|cut -d. -f1)
  FIVE_CHECK=$(echo "${FIVE}"|cut -d. -f1)
  FIFTEEN_CHECK=$(echo "${FIFTEEN}"|cut -d. -f1)
  CPU_PERCENTAGE=$(ps -A -o pcpu | grep -v -e "%" -e "0.0" | awk '{sum += $1} END {print sum"%"}')
  #Setting colors
  SHOW="no"

  if [ $ONE_CHECK -eq 1 ]; then ONE="${WARNING}${ONE}${NORMAL}"; SHOW="yes";
  elif [ $ONE_CHECK -gt 1 ]; then ONE="${CRITICAL}${ONE}${NORMAL}"; SHOW="yes";
  fi

  if [ $FIVE_CHECK -eq 1 ]; then FIVE="${WARNING}${FIVE}${NORMAL}"; SHOW="yes";
  elif [ $FIVE_CHECK -gt 1 ]; then FIVE="${CRITICAL}${FIVE}${NORMAL}"; SHOW="yes";
  fi

  if [ $FIFTEEN_CHECK -eq 1 ]; then FIFTEEN="${WARNING}${FIFTEEN}${NORMAL}"; SHOW="yes";
  elif [ $FIFTEEN_CHECK -gt 1 ]; then FIFTEEN="${CRITICAL}${FIFTEEN}${NORMAL}"; SHOW="yes";
  fi

  [ "$SHOW" = yes ] || [ "$SYSTEMLOAD_ARG" = all ] && \
  echo -e "System Load: ${CPU_PERCENTAGE}\n1min\t5min\t15min \n${ONE}\t${FIVE}\t${FIFTEEN}"

  if INTERACTIVE; then
    echo "Run dstat? [Y/n]"
    read -r ANS
    [ "$ANS" = "N" ] || [ "$ANS" = "n" ] || DSTAT
  fi
  #[ $ONE_CHECK -gt 1 ] && DSTAT

  return $?
}

function MAILQUEUE(){
  local MAILQUEUE_ARG=$1
  local TOTAL_FAILED_EMAILS LIST GOINGTO GOINGTO_COUNT
  if [ "$(whoami)" = "root" ]; then
    local MQUEUE="/var/spool/mqueue"
    #GOINGTO=`mailq -qL | grep @ | grep -v -i deferred | sort | tr [:upper:] [:lower:] | uniq | awk '{print $1}'`
    if info mailq 2>/dev/null | cat - | head | grep -iq exim; then return 1; fi
    TOTAL_FAILED_EMAILS=$(mailq -qL | grep requests: | cut -d" " -f 3 | grep -v ^0)
    [ "$TOTAL_FAILED_EMAILS" ] || TOTAL_FAILED_EMAILS=0
    if [ -d "$MQUEUE" ]; then
      LIST=$(find $MQUEUE -type f)
      GOINGTO=$(grep "To:.*@" $MQUEUE/Qf* 2>/dev/null | cut -d" " -f2 | sed -e 's/<//g' -e 's/>//g' | sort | tr "[:upper:]" "[:lower:]" | uniq -c | sort -nr)
      GOINGTO_COUNT=$(echo "$GOINGTO" | grep -c @)
      #COMINGFROM=`grep From:.* $MQUEUE/Qf* 2>/dev/null | cut -d: -f3`
      #TO_FROM_LIST="/tmp/tfl"
      #rm $TO_FROM_LIST 2>/dev/null
      #if [ -n "$LIST" ]; then
      #  echo "$LIST" | grep "$MQUEUE/Qf" | \
      #  while read EMAIL; do
      #    #TO=`grep To:.*@ $EMAIL 2>/dev/null | cut -d" " -f2 | sed -e 's/<//g' -e 's/>//g' | sort -u | tr [:upper:] [:lower:]`
      #    TO=`grep To:.*@ $EMAIL 2>/dev/null | cut -d" " -f2 | head -1 | sed -e 's/<//g' -e 's/>//g'`
      #    FROM=`grep -e From:.*@ -e "Mail Delivery Subsystem" $EMAIL 2>/dev/null | cut -d" " -f2- | head -1 | sed -e 's/<//g' -e 's/>//g'`
      #    [ -n "${TO}" -a -z "${FROM}" ] && echo -e "${TO}\t\t\t${EMAIL:18}" >>"$TO_FROM_LIST"
      #    [ -z "${TO}" -a -n "${FROM}" ] && echo -e "\t\t\t${FROM}\t${EMAIL:18}" >>"$TO_FROM_LIST"
      #    [ -n "${TO}" -a -n "${FROM}" ] && echo -e "${TO}\t${FROM}\t${EMAIL:18}" >>"$TO_FROM_LIST"
      #    #[ "$TO" -a -z "$FROM" ] && echo && echo "$EMAIL" && echo -e "To:${TO}"
      #    #[ "$TO" -a "$FROM" ] && echo && echo "$EMAIL" && echo -e "To:${TO}\t\tFrom:${FROM}"
      #  done
      #  cat "$TO_FROM_LIST" | sort -s -n -k 1,1
      #fi
      #exit
      # Getting the age of the failed emails -- START
      local SECONDS 
      local O_EMAIL_FILE O_AGE_SECONDS O_EMAIL_SECONDS O_EMAIL O_MSG
      local N_EMAIL_FILE N_AGE_SECONDS N_EMAIL_SECONDS N_EMAIL N_MSG
      SECONDS=$(date +%s)
      O_EMAIL_FILE=$(ls -tr $MQUEUE/Qf* 2>/dev/null | head -1)
      N_EMAIL_FILE=$(ls -t  $MQUEUE/Qf* 2>/dev/null | head -1)
      if [ -f "$O_EMAIL_FILE" ] && [ -f "$N_EMAIL_FILE" ]; then
        O_AGE_SECONDS=$(stat -c %Z "$O_EMAIL_FILE")
        N_AGE_SECONDS=$(stat -c %Z "$N_EMAIL_FILE")
        O_EMAIL_SECONDS=$(($SECONDS - $O_AGE_SECONDS))
        N_EMAIL_SECONDS=$(($SECONDS - $N_AGE_SECONDS))
        O_EMAIL=$(($O_EMAIL_SECONDS/86400))
        N_EMAIL=$(($N_EMAIL_SECONDS/86400))
        O_MSG="The oldest failed email is ${O_EMAIL} Days old"
        N_MSG="The newest failed email is ${N_EMAIL} Days old"
      fi
      # Getting the age of the failed emails -- STOP

      if [ "$GOINGTO_COUNT" -gt 0 ] && [ "$MAILQUEUE_ARG" != all ] && [ -n "$TOTAL_FAILED_EMAILS" ]; then
        echo "$TOTAL_FAILED_EMAILS dead email(s) with $GOINGTO_COUNT unique email addresses."
        [ "$O_MSG" ] && [ "$N_MSG" ] && echo "$O_MSG" && echo "$N_MSG"
      fi
      #List everything.
      if [ "$MAILQUEUE_ARG" = all ]; then
        #qf_EMAIL_COUNT=`ls "$MQUEUE"/qf* 2>/dev/null | wc -l`
        #QF_EMAIL_COUNT=`ls "$MQUEUE"/Qf* 2>/dev/null | wc -l`
        #DF_EMAIL_COUNT=`ls "$MQUEUE"/df* 2>/dev/null | wc -l`
        local qf_EMAIL_LIST qf_EMAIL_COUNT
        local QF_EMAIL_LIST QF_EMAIL_COUNT
        local DF_EMAIL_LIST DF_EMAIL_COUNT
        local QF_SERIAL DF_SERIAL
        local DIFF LS_DIFF
        qf_EMAIL_LIST=$(echo "$LIST" | grep $MQUEUE/qf 2>/dev/null)
        QF_EMAIL_LIST=$(echo "$LIST" | grep $MQUEUE/Qf 2>/dev/null)
        DF_EMAIL_LIST=$(echo "$LIST" | grep $MQUEUE/df 2>/dev/null)
        qf_EMAIL_COUNT=$(echo "$qf_EMAIL_LIST" | wc -l)
        QF_EMAIL_COUNT=$(echo "$QF_EMAIL_LIST" | wc -l)
        DF_EMAIL_COUNT=$(echo "$DF_EMAIL_LIST" | wc -l)
        QF_SERIAL=$(for qf_file in $QF_EMAIL_LIST; do echo ${qf_file:20}; done)
        DF_SERIAL=$(for df_file in $DF_EMAIL_LIST; do echo ${df_file:20}; done)

        if [ "$QF_EMAIL_COUNT" -gt 1 ]; then
          if [ "$QF_EMAIL_COUNT" ] && [ "$TOTAL_FAILED_EMAILS" ] && [ "$QF_EMAIL_COUNT" -eq "$TOTAL_FAILED_EMAILS" ]; then
            echo "All $QF_EMAIL_COUNT emails in the queue are dead emails"
            echo "and none are queued to go out."
          elif [ "$QF_EMAIL_COUNT" -ne "$DF_EMAIL_COUNT" ]; then
            cd "$MQUEUE"
            echo
            echo "There are $QF_EMAIL_COUNT Queue files and $DF_EMAIL_COUNT Data files..."
            echo "This isn't exactly normal..."
            echo "The orphan files are:"
            DIFF=$(diff <(echo "$QF_SERIAL") <(echo "$DF_SERIAL") | awk '{print $2}')
            LS_DIFF=$(for file in $DIFF; do ls *$file; done)
            echo "$LS_DIFF"
            cd - >/dev/null
          else
            echo "Total of $qf_EMAIL_COUNT email(s) processing in the queue,"
            echo "and $TOTAL_FAILED_EMAILS are dead email(s)."
          fi
        else
          echo "All good in the mail-hood..."
        fi
        if [ "$TOTAL_FAILED_EMAILS" -gt 0 ]; then
          echo
          read -pr "Press Enter to see a list of email addresses"
          echo -e "They were intended for:\n${GOINGTO}" | more
          echo "Would you like to move all failed emails from"
          #echo "or, "
          echo -n "$MQUEUE -> ${MQUEUE}.${TODAY} [y/N]: "
          read -r ANS
          if [ "$ANS" = "Y" ] || [ "$ANS" = "y" ]; then
            cd "$MQUEUE"
            service sendmail stop
            echo "Working... Please wait..."
            [ -d "${MQUEUE}.${TODAY}" ] || mkdir "${MQUEUE}.${TODAY}"
            for file in $QF_SERIAL; do
              if [ $(ls *$file 2>/dev/null | wc -l) -eq 2 ]; then
                mv *$file "${MQUEUE}.${TODAY}"
              fi
            done
            service sendmail start
            cd - >/dev/null
            echo "Done"
            MAILQUEUE all
          else
            echo
            echo "Mail has been untouched."
          fi
        fi
      fi

    else
      echo "$MQUEUE directory does not exist."
    fi
  elif [ "$(whoami)" != "root" ] && [ "$MAILQUEUE_ARG" = "all" ]; then
    echo "You must run this switch as root"
    return 1
  fi
}

function SecondsToDaysHoursMinutesSeconds(){
  local seconds=$1
  local days=$(("${seconds}"/86400))
  local seconds=$(("${seconds}"-("${days}"*86400) ))
  local hours=$(("${seconds}"/3600))
  local seconds=$((seconds-("${hours}"*3600) ))
  local minutes=$(("${seconds}"/60))
  local seconds=$(( "${seconds}"-("${minutes}"*60) ))
  if [ "$2" = "OLD" ]; then
    echo "The oldest email is ${days}D ${hours}H ${minutes}M ${seconds}S old"
  elif [ "$2" = "NEW" ]; then
    echo "The newest email is ${days}D ${hours}H ${minutes}M ${seconds}S old"
  fi
}

function WHERE_AM_I(){
  echo
  NODE
  echo
  GET_IP lan
  echo
  uptime | cut -d, -f1 | awk '{print "Up: "$3" " $4}'
  uname -n; date; uname -mrs
  SYSTEMLOAD warn
  echo
  DISK_CHECK warn
  echo
  MAILQUEUE warn
  return 0
}

function HELP(){
  echo "
  Help:

  where [ -c | -d | -f [PATH] | -h | -i | -l | -m | -n | -r | -s | -v | -w ]

        -c | --cores      Shows information about the cores on the processor.
        -d | --dstat      Runs a dstat on the system.
  -f [PATH]| --findu [PATH]     Finds which directory is using the most space from provided PATH.
        -h | --help       This help/usage message.
        -i | --ipaddress  Get all ip addresses on this box.
        -l | --load       Shows the average system load.
        -m | --mail       Gives information on the mail queue of the system.
        -n | --node       Get the sitecode of the server.
        -r | --remote     Parse SSH logs to check who tried to/has logged in.
        -s | --space      The space and usage info of all partitions.
        -w | --warning    Only show partitions in the warning range without host info.

  Example: You may also use multiple arguments at once.
  where -s -i -f [PATH] -l
  "
  return 1
}

##Script
#declare THISSCRIPT=$(basename $0)
#Handle Arguments
declare ARGS=$@
if [ -z "$ARGS" ]; then
  WHERE_AM_I
elif [ -n "$ARGS" ]; then
  for ARG in $ARGS; do
    case $ARG in
      -c|--cores)
        CORES
      ;;
      -d|--dstat)
        DSTAT
      ;;
      -f|--findu)
        shift 1
        declare finduPath="${1-${PWD}}"
        if ! echo "$finduPath" | grep -q ^-; then
          FINDUSAGE "$finduPath"
        else
          echo "Please provide a path after -f. Otherwise your current directory will be used."
        fi
        shift 1
      ;;
      -i|--ipaddress)
        GET_IP all
      ;;
      -l|--load)
        SYSTEMLOAD all
      ;;
      -m|--mail)
        MAILQUEUE all
      ;;
      -n|--node)
        NODE
      ;;
      -r|--remote)
        REMOTE
      ;;
      -s|--space)
        DISK_CHECK all
      ;;
      -w|--warning)
        DISK_CHECK warn
      ;;
      *)
        HELP
    esac
    shift 1
  done
fi



